/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/platform";
exports.ids = ["vendor-chunks/platform"];
exports.modules = {

/***/ "(ssr)/./node_modules/platform/platform.js":
/*!*******************************************!*\
  !*** ./node_modules/platform/platform.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;;\n(function() {\n    \"use strict\";\n    /** Used to determine if values are of the language type `Object`. */ var objectTypes = {\n        \"function\": true,\n        \"object\": true\n    };\n    /** Used as a reference to the global object. */ var root = objectTypes[\"undefined\"] && window || this;\n    /** Backup possible global object. */ var oldRoot = root;\n    /** Detect free variable `exports`. */ var freeExports = objectTypes[typeof exports] && exports;\n    /** Detect free variable `module`. */ var freeModule = objectTypes[\"object\"] && module && !module.nodeType && module;\n    /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */ var freeGlobal = freeExports && freeModule && typeof global == \"object\" && global;\n    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n        root = freeGlobal;\n    }\n    /**\n   * Used as the maximum length of an array-like object.\n   * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)\n   * for more details.\n   */ var maxSafeInteger = Math.pow(2, 53) - 1;\n    /** Regular expression to detect Opera. */ var reOpera = /\\bOpera/;\n    /** Possible global object. */ var thisBinding = this;\n    /** Used for native method references. */ var objectProto = Object.prototype;\n    /** Used to check for own properties of an object. */ var hasOwnProperty = objectProto.hasOwnProperty;\n    /** Used to resolve the internal `[[Class]]` of values. */ var toString = objectProto.toString;\n    /*--------------------------------------------------------------------------*/ /**\n   * Capitalizes a string value.\n   *\n   * @private\n   * @param {string} string The string to capitalize.\n   * @returns {string} The capitalized string.\n   */ function capitalize(string) {\n        string = String(string);\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n    /**\n   * A utility function to clean up the OS name.\n   *\n   * @private\n   * @param {string} os The OS name to clean up.\n   * @param {string} [pattern] A `RegExp` pattern matching the OS name.\n   * @param {string} [label] A label for the OS.\n   */ function cleanupOS(os, pattern, label) {\n        // Platform tokens are defined at:\n        // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n        // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n        var data = {\n            \"10.0\": \"10\",\n            \"6.4\": \"10 Technical Preview\",\n            \"6.3\": \"8.1\",\n            \"6.2\": \"8\",\n            \"6.1\": \"Server 2008 R2 / 7\",\n            \"6.0\": \"Server 2008 / Vista\",\n            \"5.2\": \"Server 2003 / XP 64-bit\",\n            \"5.1\": \"XP\",\n            \"5.01\": \"2000 SP1\",\n            \"5.0\": \"2000\",\n            \"4.0\": \"NT\",\n            \"4.90\": \"ME\"\n        };\n        // Detect Windows version from platform tokens.\n        if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) && (data = data[/[\\d.]+$/.exec(os)])) {\n            os = \"Windows \" + data;\n        }\n        // Correct character case and cleanup string.\n        os = String(os);\n        if (pattern && label) {\n            os = os.replace(RegExp(pattern, \"i\"), label);\n        }\n        os = format(os.replace(/ ce$/i, \" CE\").replace(/\\bhpw/i, \"web\").replace(/\\bMacintosh\\b/, \"Mac OS\").replace(/_PowerPC\\b/i, \" OS\").replace(/\\b(OS X) [^ \\d]+/i, \"$1\").replace(/\\bMac (OS X)\\b/, \"$1\").replace(/\\/(\\d)/, \" $1\").replace(/_/g, \".\").replace(/(?: BePC|[ .]*fc[ \\d.]+)$/i, \"\").replace(/\\bx86\\.64\\b/gi, \"x86_64\").replace(/\\b(Windows Phone) OS\\b/, \"$1\").replace(/\\b(Chrome OS \\w+) [\\d.]+\\b/, \"$1\").split(\" on \")[0]);\n        return os;\n    }\n    /**\n   * An iteration utility for arrays and objects.\n   *\n   * @private\n   * @param {Array|Object} object The object to iterate over.\n   * @param {Function} callback The function called per iteration.\n   */ function each(object, callback) {\n        var index = -1, length = object ? object.length : 0;\n        if (typeof length == \"number\" && length > -1 && length <= maxSafeInteger) {\n            while(++index < length){\n                callback(object[index], index, object);\n            }\n        } else {\n            forOwn(object, callback);\n        }\n    }\n    /**\n   * Trim and conditionally capitalize string values.\n   *\n   * @private\n   * @param {string} string The string to format.\n   * @returns {string} The formatted string.\n   */ function format(string) {\n        string = trim(string);\n        return /^(?:webOS|i(?:OS|P))/.test(string) ? string : capitalize(string);\n    }\n    /**\n   * Iterates over an object's own properties, executing the `callback` for each.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} callback The function executed per own property.\n   */ function forOwn(object, callback) {\n        for(var key in object){\n            if (hasOwnProperty.call(object, key)) {\n                callback(object[key], key, object);\n            }\n        }\n    }\n    /**\n   * Gets the internal `[[Class]]` of a value.\n   *\n   * @private\n   * @param {*} value The value.\n   * @returns {string} The `[[Class]]`.\n   */ function getClassOf(value) {\n        return value == null ? capitalize(value) : toString.call(value).slice(8, -1);\n    }\n    /**\n   * Host objects can return type values that are different from their actual\n   * data type. The objects we are concerned with usually return non-primitive\n   * types of \"object\", \"function\", or \"unknown\".\n   *\n   * @private\n   * @param {*} object The owner of the property.\n   * @param {string} property The property to check.\n   * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.\n   */ function isHostType(object, property) {\n        var type = object != null ? typeof object[property] : \"number\";\n        return !/^(?:boolean|number|string|undefined)$/.test(type) && (type == \"object\" ? !!object[property] : true);\n    }\n    /**\n   * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.\n   *\n   * @private\n   * @param {string} string The string to qualify.\n   * @returns {string} The qualified string.\n   */ function qualify(string) {\n        return String(string).replace(/([ -])(?!$)/g, \"$1?\");\n    }\n    /**\n   * A bare-bones `Array#reduce` like utility function.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @returns {*} The accumulated result.\n   */ function reduce(array, callback) {\n        var accumulator = null;\n        each(array, function(value, index) {\n            accumulator = callback(accumulator, value, index, array);\n        });\n        return accumulator;\n    }\n    /**\n   * Removes leading and trailing whitespace from a string.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} The trimmed string.\n   */ function trim(string) {\n        return String(string).replace(/^ +| +$/g, \"\");\n    }\n    /*--------------------------------------------------------------------------*/ /**\n   * Creates a new platform object.\n   *\n   * @memberOf platform\n   * @param {Object|string} [ua=navigator.userAgent] The user agent string or\n   *  context object.\n   * @returns {Object} A platform object.\n   */ function parse(ua) {\n        /** The environment context object. */ var context = root;\n        /** Used to flag when a custom context is provided. */ var isCustomContext = ua && typeof ua == \"object\" && getClassOf(ua) != \"String\";\n        // Juggle arguments.\n        if (isCustomContext) {\n            context = ua;\n            ua = null;\n        }\n        /** Browser navigator object. */ var nav = context.navigator || {};\n        /** Browser user agent string. */ var userAgent = nav.userAgent || \"\";\n        ua || (ua = userAgent);\n        /** Used to flag when `thisBinding` is the [ModuleScope]. */ var isModuleScope = isCustomContext || thisBinding == oldRoot;\n        /** Used to detect if browser is like Chrome. */ var likeChrome = isCustomContext ? !!nav.likeChrome : /\\bChrome\\b/.test(ua) && !/internal|\\n/i.test(toString.toString());\n        /** Internal `[[Class]]` value shortcuts. */ var objectClass = \"Object\", airRuntimeClass = isCustomContext ? objectClass : \"ScriptBridgingProxyObject\", enviroClass = isCustomContext ? objectClass : \"Environment\", javaClass = isCustomContext && context.java ? \"JavaPackage\" : getClassOf(context.java), phantomClass = isCustomContext ? objectClass : \"RuntimeObject\";\n        /** Detect Java environments. */ var java = /\\bJava/.test(javaClass) && context.java;\n        /** Detect Rhino. */ var rhino = java && getClassOf(context.environment) == enviroClass;\n        /** A character to represent alpha. */ var alpha = java ? \"a\" : \"α\";\n        /** A character to represent beta. */ var beta = java ? \"b\" : \"β\";\n        /** Browser document object. */ var doc = context.document || {};\n        /**\n     * Detect Opera browser (Presto-based).\n     * http://www.howtocreate.co.uk/operaStuff/operaObject.html\n     * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini\n     */ var opera = context.operamini || context.opera;\n        /** Opera `[[Class]]`. */ var operaClass = reOpera.test(operaClass = isCustomContext && opera ? opera[\"[[Class]]\"] : getClassOf(opera)) ? operaClass : opera = null;\n        /*------------------------------------------------------------------------*/ /** Temporary variable used over the script's lifetime. */ var data;\n        /** The CPU architecture. */ var arch = ua;\n        /** Platform description array. */ var description = [];\n        /** Platform alpha/beta indicator. */ var prerelease = null;\n        /** A flag to indicate that environment features should be used to resolve the platform. */ var useFeatures = ua == userAgent;\n        /** The browser/environment version. */ var version = useFeatures && opera && typeof opera.version == \"function\" && opera.version();\n        /** A flag to indicate if the OS ends with \"/ Version\" */ var isSpecialCasedOS;\n        /* Detectable layout engines (order is important). */ var layout = getLayout([\n            {\n                \"label\": \"EdgeHTML\",\n                \"pattern\": \"Edge\"\n            },\n            \"Trident\",\n            {\n                \"label\": \"WebKit\",\n                \"pattern\": \"AppleWebKit\"\n            },\n            \"iCab\",\n            \"Presto\",\n            \"NetFront\",\n            \"Tasman\",\n            \"KHTML\",\n            \"Gecko\"\n        ]);\n        /* Detectable browser names (order is important). */ var name = getName([\n            \"Adobe AIR\",\n            \"Arora\",\n            \"Avant Browser\",\n            \"Breach\",\n            \"Camino\",\n            \"Electron\",\n            \"Epiphany\",\n            \"Fennec\",\n            \"Flock\",\n            \"Galeon\",\n            \"GreenBrowser\",\n            \"iCab\",\n            \"Iceweasel\",\n            \"K-Meleon\",\n            \"Konqueror\",\n            \"Lunascape\",\n            \"Maxthon\",\n            {\n                \"label\": \"Microsoft Edge\",\n                \"pattern\": \"(?:Edge|Edg|EdgA|EdgiOS)\"\n            },\n            \"Midori\",\n            \"Nook Browser\",\n            \"PaleMoon\",\n            \"PhantomJS\",\n            \"Raven\",\n            \"Rekonq\",\n            \"RockMelt\",\n            {\n                \"label\": \"Samsung Internet\",\n                \"pattern\": \"SamsungBrowser\"\n            },\n            \"SeaMonkey\",\n            {\n                \"label\": \"Silk\",\n                \"pattern\": \"(?:Cloud9|Silk-Accelerated)\"\n            },\n            \"Sleipnir\",\n            \"SlimBrowser\",\n            {\n                \"label\": \"SRWare Iron\",\n                \"pattern\": \"Iron\"\n            },\n            \"Sunrise\",\n            \"Swiftfox\",\n            \"Vivaldi\",\n            \"Waterfox\",\n            \"WebPositive\",\n            {\n                \"label\": \"Yandex Browser\",\n                \"pattern\": \"YaBrowser\"\n            },\n            {\n                \"label\": \"UC Browser\",\n                \"pattern\": \"UCBrowser\"\n            },\n            \"Opera Mini\",\n            {\n                \"label\": \"Opera Mini\",\n                \"pattern\": \"OPiOS\"\n            },\n            \"Opera\",\n            {\n                \"label\": \"Opera\",\n                \"pattern\": \"OPR\"\n            },\n            \"Chromium\",\n            \"Chrome\",\n            {\n                \"label\": \"Chrome\",\n                \"pattern\": \"(?:HeadlessChrome)\"\n            },\n            {\n                \"label\": \"Chrome Mobile\",\n                \"pattern\": \"(?:CriOS|CrMo)\"\n            },\n            {\n                \"label\": \"Firefox\",\n                \"pattern\": \"(?:Firefox|Minefield)\"\n            },\n            {\n                \"label\": \"Firefox for iOS\",\n                \"pattern\": \"FxiOS\"\n            },\n            {\n                \"label\": \"IE\",\n                \"pattern\": \"IEMobile\"\n            },\n            {\n                \"label\": \"IE\",\n                \"pattern\": \"MSIE\"\n            },\n            \"Safari\"\n        ]);\n        /* Detectable products (order is important). */ var product = getProduct([\n            {\n                \"label\": \"BlackBerry\",\n                \"pattern\": \"BB10\"\n            },\n            \"BlackBerry\",\n            {\n                \"label\": \"Galaxy S\",\n                \"pattern\": \"GT-I9000\"\n            },\n            {\n                \"label\": \"Galaxy S2\",\n                \"pattern\": \"GT-I9100\"\n            },\n            {\n                \"label\": \"Galaxy S3\",\n                \"pattern\": \"GT-I9300\"\n            },\n            {\n                \"label\": \"Galaxy S4\",\n                \"pattern\": \"GT-I9500\"\n            },\n            {\n                \"label\": \"Galaxy S5\",\n                \"pattern\": \"SM-G900\"\n            },\n            {\n                \"label\": \"Galaxy S6\",\n                \"pattern\": \"SM-G920\"\n            },\n            {\n                \"label\": \"Galaxy S6 Edge\",\n                \"pattern\": \"SM-G925\"\n            },\n            {\n                \"label\": \"Galaxy S7\",\n                \"pattern\": \"SM-G930\"\n            },\n            {\n                \"label\": \"Galaxy S7 Edge\",\n                \"pattern\": \"SM-G935\"\n            },\n            \"Google TV\",\n            \"Lumia\",\n            \"iPad\",\n            \"iPod\",\n            \"iPhone\",\n            \"Kindle\",\n            {\n                \"label\": \"Kindle Fire\",\n                \"pattern\": \"(?:Cloud9|Silk-Accelerated)\"\n            },\n            \"Nexus\",\n            \"Nook\",\n            \"PlayBook\",\n            \"PlayStation Vita\",\n            \"PlayStation\",\n            \"TouchPad\",\n            \"Transformer\",\n            {\n                \"label\": \"Wii U\",\n                \"pattern\": \"WiiU\"\n            },\n            \"Wii\",\n            \"Xbox One\",\n            {\n                \"label\": \"Xbox 360\",\n                \"pattern\": \"Xbox\"\n            },\n            \"Xoom\"\n        ]);\n        /* Detectable manufacturers. */ var manufacturer = getManufacturer({\n            \"Apple\": {\n                \"iPad\": 1,\n                \"iPhone\": 1,\n                \"iPod\": 1\n            },\n            \"Alcatel\": {},\n            \"Archos\": {},\n            \"Amazon\": {\n                \"Kindle\": 1,\n                \"Kindle Fire\": 1\n            },\n            \"Asus\": {\n                \"Transformer\": 1\n            },\n            \"Barnes & Noble\": {\n                \"Nook\": 1\n            },\n            \"BlackBerry\": {\n                \"PlayBook\": 1\n            },\n            \"Google\": {\n                \"Google TV\": 1,\n                \"Nexus\": 1\n            },\n            \"HP\": {\n                \"TouchPad\": 1\n            },\n            \"HTC\": {},\n            \"Huawei\": {},\n            \"Lenovo\": {},\n            \"LG\": {},\n            \"Microsoft\": {\n                \"Xbox\": 1,\n                \"Xbox One\": 1\n            },\n            \"Motorola\": {\n                \"Xoom\": 1\n            },\n            \"Nintendo\": {\n                \"Wii U\": 1,\n                \"Wii\": 1\n            },\n            \"Nokia\": {\n                \"Lumia\": 1\n            },\n            \"Oppo\": {},\n            \"Samsung\": {\n                \"Galaxy S\": 1,\n                \"Galaxy S2\": 1,\n                \"Galaxy S3\": 1,\n                \"Galaxy S4\": 1\n            },\n            \"Sony\": {\n                \"PlayStation\": 1,\n                \"PlayStation Vita\": 1\n            },\n            \"Xiaomi\": {\n                \"Mi\": 1,\n                \"Redmi\": 1\n            }\n        });\n        /* Detectable operating systems (order is important). */ var os = getOS([\n            \"Windows Phone\",\n            \"KaiOS\",\n            \"Android\",\n            \"CentOS\",\n            {\n                \"label\": \"Chrome OS\",\n                \"pattern\": \"CrOS\"\n            },\n            \"Debian\",\n            {\n                \"label\": \"DragonFly BSD\",\n                \"pattern\": \"DragonFly\"\n            },\n            \"Fedora\",\n            \"FreeBSD\",\n            \"Gentoo\",\n            \"Haiku\",\n            \"Kubuntu\",\n            \"Linux Mint\",\n            \"OpenBSD\",\n            \"Red Hat\",\n            \"SuSE\",\n            \"Ubuntu\",\n            \"Xubuntu\",\n            \"Cygwin\",\n            \"Symbian OS\",\n            \"hpwOS\",\n            \"webOS \",\n            \"webOS\",\n            \"Tablet OS\",\n            \"Tizen\",\n            \"Linux\",\n            \"Mac OS X\",\n            \"Macintosh\",\n            \"Mac\",\n            \"Windows 98;\",\n            \"Windows \"\n        ]);\n        /*------------------------------------------------------------------------*/ /**\n     * Picks the layout engine from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected layout engine.\n     */ function getLayout(guesses) {\n            return reduce(guesses, function(result, guess) {\n                return result || RegExp(\"\\\\b\" + (guess.pattern || qualify(guess)) + \"\\\\b\", \"i\").exec(ua) && (guess.label || guess);\n            });\n        }\n        /**\n     * Picks the manufacturer from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An object of guesses.\n     * @returns {null|string} The detected manufacturer.\n     */ function getManufacturer(guesses) {\n            return reduce(guesses, function(result, value, key) {\n                // Lookup the manufacturer by product or scan the UA for the manufacturer.\n                return result || (value[product] || value[/^[a-z]+(?: +[a-z]+\\b)*/i.exec(product)] || RegExp(\"\\\\b\" + qualify(key) + \"(?:\\\\b|\\\\w*\\\\d)\", \"i\").exec(ua)) && key;\n            });\n        }\n        /**\n     * Picks the browser name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected browser name.\n     */ function getName(guesses) {\n            return reduce(guesses, function(result, guess) {\n                return result || RegExp(\"\\\\b\" + (guess.pattern || qualify(guess)) + \"\\\\b\", \"i\").exec(ua) && (guess.label || guess);\n            });\n        }\n        /**\n     * Picks the OS name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected OS name.\n     */ function getOS(guesses) {\n            return reduce(guesses, function(result, guess) {\n                var pattern = guess.pattern || qualify(guess);\n                if (!result && (result = RegExp(\"\\\\b\" + pattern + \"(?:/[\\\\d.]+|[ \\\\w.]*)\", \"i\").exec(ua))) {\n                    result = cleanupOS(result, pattern, guess.label || guess);\n                }\n                return result;\n            });\n        }\n        /**\n     * Picks the product name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected product name.\n     */ function getProduct(guesses) {\n            return reduce(guesses, function(result, guess) {\n                var pattern = guess.pattern || qualify(guess);\n                if (!result && (result = RegExp(\"\\\\b\" + pattern + \" *\\\\d+[.\\\\w_]*\", \"i\").exec(ua) || RegExp(\"\\\\b\" + pattern + \" *\\\\w+-[\\\\w]*\", \"i\").exec(ua) || RegExp(\"\\\\b\" + pattern + \"(?:; *(?:[a-z]+[_-])?[a-z]+\\\\d+|[^ ();-]*)\", \"i\").exec(ua))) {\n                    // Split by forward slash and append product version if needed.\n                    if ((result = String(guess.label && !RegExp(pattern, \"i\").test(guess.label) ? guess.label : result).split(\"/\"))[1] && !/[\\d.]+/.test(result[0])) {\n                        result[0] += \" \" + result[1];\n                    }\n                    // Correct character case and cleanup string.\n                    guess = guess.label || guess;\n                    result = format(result[0].replace(RegExp(pattern, \"i\"), guess).replace(RegExp(\"; *(?:\" + guess + \"[_-])?\", \"i\"), \" \").replace(RegExp(\"(\" + guess + \")[-_.]?(\\\\w)\", \"i\"), \"$1 $2\"));\n                }\n                return result;\n            });\n        }\n        /**\n     * Resolves the version using an array of UA patterns.\n     *\n     * @private\n     * @param {Array} patterns An array of UA patterns.\n     * @returns {null|string} The detected version.\n     */ function getVersion(patterns) {\n            return reduce(patterns, function(result, pattern) {\n                return result || (RegExp(pattern + \"(?:-[\\\\d.]+/|(?: for [\\\\w-]+)?[ /-])([\\\\d.]+[^ ();/_-]*)\", \"i\").exec(ua) || 0)[1] || null;\n            });\n        }\n        /**\n     * Returns `platform.description` when the platform object is coerced to a string.\n     *\n     * @name toString\n     * @memberOf platform\n     * @returns {string} Returns `platform.description` if available, else an empty string.\n     */ function toStringPlatform() {\n            return this.description || \"\";\n        }\n        /*------------------------------------------------------------------------*/ // Convert layout to an array so we can add extra details.\n        layout && (layout = [\n            layout\n        ]);\n        // Detect Android products.\n        // Browsers on Android devices typically provide their product IDS after \"Android;\"\n        // up to \"Build\" or \") AppleWebKit\".\n        // Example:\n        // \"Mozilla/5.0 (Linux; Android 8.1.0; Moto G (5) Plus) AppleWebKit/537.36\n        // (KHTML, like Gecko) Chrome/70.0.3538.80 Mobile Safari/537.36\"\n        if (/\\bAndroid\\b/.test(os) && !product && (data = /\\bAndroid[^;]*;(.*?)(?:Build|\\) AppleWebKit)\\b/i.exec(ua))) {\n            product = trim(data[1])// Replace any language codes (eg. \"en-US\").\n            .replace(/^[a-z]{2}-[a-z]{2};\\s*/i, \"\") || null;\n        }\n        // Detect product names that contain their manufacturer's name.\n        if (manufacturer && !product) {\n            product = getProduct([\n                manufacturer\n            ]);\n        } else if (manufacturer && product) {\n            product = product.replace(RegExp(\"^(\" + qualify(manufacturer) + \")[-_.\\\\s]\", \"i\"), manufacturer + \" \").replace(RegExp(\"^(\" + qualify(manufacturer) + \")[-_.]?(\\\\w)\", \"i\"), manufacturer + \" $2\");\n        }\n        // Clean up Google TV.\n        if (data = /\\bGoogle TV\\b/.exec(product)) {\n            product = data[0];\n        }\n        // Detect simulators.\n        if (/\\bSimulator\\b/i.test(ua)) {\n            product = (product ? product + \" \" : \"\") + \"Simulator\";\n        }\n        // Detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS.\n        if (name == \"Opera Mini\" && /\\bOPiOS\\b/.test(ua)) {\n            description.push(\"running in Turbo/Uncompressed mode\");\n        }\n        // Detect IE Mobile 11.\n        if (name == \"IE\" && /\\blike iPhone OS\\b/.test(ua)) {\n            data = parse(ua.replace(/like iPhone OS/, \"\"));\n            manufacturer = data.manufacturer;\n            product = data.product;\n        } else if (/^iP/.test(product)) {\n            name || (name = \"Safari\");\n            os = \"iOS\" + ((data = / OS ([\\d_]+)/i.exec(ua)) ? \" \" + data[1].replace(/_/g, \".\") : \"\");\n        } else if (name == \"Konqueror\" && /^Linux\\b/i.test(os)) {\n            os = \"Kubuntu\";\n        } else if (manufacturer && manufacturer != \"Google\" && (/Chrome/.test(name) && !/\\bMobile Safari\\b/i.test(ua) || /\\bVita\\b/.test(product)) || /\\bAndroid\\b/.test(os) && /^Chrome/.test(name) && /\\bVersion\\//i.test(ua)) {\n            name = \"Android Browser\";\n            os = /\\bAndroid\\b/.test(os) ? os : \"Android\";\n        } else if (name == \"Silk\") {\n            if (!/\\bMobi/i.test(ua)) {\n                os = \"Android\";\n                description.unshift(\"desktop mode\");\n            }\n            if (/Accelerated *= *true/i.test(ua)) {\n                description.unshift(\"accelerated\");\n            }\n        } else if (name == \"UC Browser\" && /\\bUCWEB\\b/.test(ua)) {\n            description.push(\"speed mode\");\n        } else if (name == \"PaleMoon\" && (data = /\\bFirefox\\/([\\d.]+)\\b/.exec(ua))) {\n            description.push(\"identifying as Firefox \" + data[1]);\n        } else if (name == \"Firefox\" && (data = /\\b(Mobile|Tablet|TV)\\b/i.exec(ua))) {\n            os || (os = \"Firefox OS\");\n            product || (product = data[1]);\n        } else if (!name || (data = !/\\bMinefield\\b/i.test(ua) && /\\b(?:Firefox|Safari)\\b/.exec(name))) {\n            // Escape the `/` for Firefox 1.\n            if (name && !product && /[\\/,]|^[^(]+?\\)/.test(ua.slice(ua.indexOf(data + \"/\") + 8))) {\n                // Clear name of false positives.\n                name = null;\n            }\n            // Reassign a generic name.\n            if ((data = product || manufacturer || os) && (product || manufacturer || /\\b(?:Android|Symbian OS|Tablet OS|webOS)\\b/.test(os))) {\n                name = /[a-z]+(?: Hat)?/i.exec(/\\bAndroid\\b/.test(os) ? os : data) + \" Browser\";\n            }\n        } else if (name == \"Electron\" && (data = (/\\bChrome\\/([\\d.]+)\\b/.exec(ua) || 0)[1])) {\n            description.push(\"Chromium \" + data);\n        }\n        // Detect non-Opera (Presto-based) versions (order is important).\n        if (!version) {\n            version = getVersion([\n                \"(?:Cloud9|CriOS|CrMo|Edge|Edg|EdgA|EdgiOS|FxiOS|HeadlessChrome|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\\\d.]+$)|UCBrowser|YaBrowser)\",\n                \"Version\",\n                qualify(name),\n                \"(?:Firefox|Minefield|NetFront)\"\n            ]);\n        }\n        // Detect stubborn layout engines.\n        if (data = layout == \"iCab\" && parseFloat(version) > 3 && \"WebKit\" || /\\bOpera\\b/.test(name) && (/\\bOPR\\b/.test(ua) ? \"Blink\" : \"Presto\") || /\\b(?:Midori|Nook|Safari)\\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && \"WebKit\" || !layout && /\\bMSIE\\b/i.test(ua) && (os == \"Mac OS\" ? \"Tasman\" : \"Trident\") || layout == \"WebKit\" && /\\bPlayStation\\b(?! Vita\\b)/i.test(name) && \"NetFront\") {\n            layout = [\n                data\n            ];\n        }\n        // Detect Windows Phone 7 desktop mode.\n        if (name == \"IE\" && (data = (/; *(?:XBLWP|ZuneWP)(\\d+)/i.exec(ua) || 0)[1])) {\n            name += \" Mobile\";\n            os = \"Windows Phone \" + (/\\+$/.test(data) ? data : data + \".x\");\n            description.unshift(\"desktop mode\");\n        } else if (/\\bWPDesktop\\b/i.test(ua)) {\n            name = \"IE Mobile\";\n            os = \"Windows Phone 8.x\";\n            description.unshift(\"desktop mode\");\n            version || (version = (/\\brv:([\\d.]+)/.exec(ua) || 0)[1]);\n        } else if (name != \"IE\" && layout == \"Trident\" && (data = /\\brv:([\\d.]+)/.exec(ua))) {\n            if (name) {\n                description.push(\"identifying as \" + name + (version ? \" \" + version : \"\"));\n            }\n            name = \"IE\";\n            version = data[1];\n        }\n        // Leverage environment features.\n        if (useFeatures) {\n            // Detect server-side environments.\n            // Rhino has a global function while others have a global object.\n            if (isHostType(context, \"global\")) {\n                if (java) {\n                    data = java.lang.System;\n                    arch = data.getProperty(\"os.arch\");\n                    os = os || data.getProperty(\"os.name\") + \" \" + data.getProperty(\"os.version\");\n                }\n                if (rhino) {\n                    try {\n                        version = context.require(\"ringo/engine\").version.join(\".\");\n                        name = \"RingoJS\";\n                    } catch (e) {\n                        if ((data = context.system) && data.global.system == context.system) {\n                            name = \"Narwhal\";\n                            os || (os = data[0].os || null);\n                        }\n                    }\n                    if (!name) {\n                        name = \"Rhino\";\n                    }\n                } else if (typeof context.process == \"object\" && !context.process.browser && (data = context.process)) {\n                    if (typeof data.versions == \"object\") {\n                        if (typeof data.versions.electron == \"string\") {\n                            description.push(\"Node \" + data.versions.node);\n                            name = \"Electron\";\n                            version = data.versions.electron;\n                        } else if (typeof data.versions.nw == \"string\") {\n                            description.push(\"Chromium \" + version, \"Node \" + data.versions.node);\n                            name = \"NW.js\";\n                            version = data.versions.nw;\n                        }\n                    }\n                    if (!name) {\n                        name = \"Node.js\";\n                        arch = data.arch;\n                        os = data.platform;\n                        version = /[\\d.]+/.exec(data.version);\n                        version = version ? version[0] : null;\n                    }\n                }\n            } else if (getClassOf(data = context.runtime) == airRuntimeClass) {\n                name = \"Adobe AIR\";\n                os = data.flash.system.Capabilities.os;\n            } else if (getClassOf(data = context.phantom) == phantomClass) {\n                name = \"PhantomJS\";\n                version = (data = data.version || null) && data.major + \".\" + data.minor + \".\" + data.patch;\n            } else if (typeof doc.documentMode == \"number\" && (data = /\\bTrident\\/(\\d+)/i.exec(ua))) {\n                // We're in compatibility mode when the Trident version + 4 doesn't\n                // equal the document mode.\n                version = [\n                    version,\n                    doc.documentMode\n                ];\n                if ((data = +data[1] + 4) != version[1]) {\n                    description.push(\"IE \" + version[1] + \" mode\");\n                    layout && (layout[1] = \"\");\n                    version[1] = data;\n                }\n                version = name == \"IE\" ? String(version[1].toFixed(1)) : version[0];\n            } else if (typeof doc.documentMode == \"number\" && /^(?:Chrome|Firefox)\\b/.test(name)) {\n                description.push(\"masking as \" + name + \" \" + version);\n                name = \"IE\";\n                version = \"11.0\";\n                layout = [\n                    \"Trident\"\n                ];\n                os = \"Windows\";\n            }\n            os = os && format(os);\n        }\n        // Detect prerelease phases.\n        if (version && (data = /(?:[ab]|dp|pre|[ab]\\d+pre)(?:\\d+\\+?)?$/i.exec(version) || /(?:alpha|beta)(?: ?\\d)?/i.exec(ua + \";\" + (useFeatures && nav.appMinorVersion)) || /\\bMinefield\\b/i.test(ua) && \"a\")) {\n            prerelease = /b/i.test(data) ? \"beta\" : \"alpha\";\n            version = version.replace(RegExp(data + \"\\\\+?$\"), \"\") + (prerelease == \"beta\" ? beta : alpha) + (/\\d+\\+?/.exec(data) || \"\");\n        }\n        // Detect Firefox Mobile.\n        if (name == \"Fennec\" || name == \"Firefox\" && /\\b(?:Android|Firefox OS|KaiOS)\\b/.test(os)) {\n            name = \"Firefox Mobile\";\n        } else if (name == \"Maxthon\" && version) {\n            version = version.replace(/\\.[\\d.]+/, \".x\");\n        } else if (/\\bXbox\\b/i.test(product)) {\n            if (product == \"Xbox 360\") {\n                os = null;\n            }\n            if (product == \"Xbox 360\" && /\\bIEMobile\\b/.test(ua)) {\n                description.unshift(\"mobile mode\");\n            }\n        } else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) && (os == \"Windows CE\" || /Mobi/i.test(ua))) {\n            name += \" Mobile\";\n        } else if (name == \"IE\" && useFeatures) {\n            try {\n                if (context.external === null) {\n                    description.unshift(\"platform preview\");\n                }\n            } catch (e) {\n                description.unshift(\"embedded\");\n            }\n        } else if ((/\\bBlackBerry\\b/.test(product) || /\\bBB10\\b/.test(ua)) && (data = (RegExp(product.replace(/ +/g, \" *\") + \"/([.\\\\d]+)\", \"i\").exec(ua) || 0)[1] || version)) {\n            data = [\n                data,\n                /BB10/.test(ua)\n            ];\n            os = (data[1] ? (product = null, manufacturer = \"BlackBerry\") : \"Device Software\") + \" \" + data[0];\n            version = null;\n        } else if (this != forOwn && product != \"Wii\" && (useFeatures && opera || /Opera/.test(name) && /\\b(?:MSIE|Firefox)\\b/i.test(ua) || name == \"Firefox\" && /\\bOS X (?:\\d+\\.){2,}/.test(os) || name == \"IE\" && (os && !/^Win/.test(os) && version > 5.5 || /\\bWindows XP\\b/.test(os) && version > 8 || version == 8 && !/\\bTrident\\b/.test(ua))) && !reOpera.test(data = parse.call(forOwn, ua.replace(reOpera, \"\") + \";\")) && data.name) {\n            // When \"identifying\", the UA contains both Opera and the other browser's name.\n            data = \"ing as \" + data.name + ((data = data.version) ? \" \" + data : \"\");\n            if (reOpera.test(name)) {\n                if (/\\bIE\\b/.test(data) && os == \"Mac OS\") {\n                    os = null;\n                }\n                data = \"identify\" + data;\n            } else {\n                data = \"mask\" + data;\n                if (operaClass) {\n                    name = format(operaClass.replace(/([a-z])([A-Z])/g, \"$1 $2\"));\n                } else {\n                    name = \"Opera\";\n                }\n                if (/\\bIE\\b/.test(data)) {\n                    os = null;\n                }\n                if (!useFeatures) {\n                    version = null;\n                }\n            }\n            layout = [\n                \"Presto\"\n            ];\n            description.push(data);\n        }\n        // Detect WebKit Nightly and approximate Chrome/Safari versions.\n        if (data = (/\\bAppleWebKit\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1]) {\n            // Correct build number for numeric comparison.\n            // (e.g. \"532.5\" becomes \"532.05\")\n            data = [\n                parseFloat(data.replace(/\\.(\\d)$/, \".0$1\")),\n                data\n            ];\n            // Nightly builds are postfixed with a \"+\".\n            if (name == \"Safari\" && data[1].slice(-1) == \"+\") {\n                name = \"WebKit Nightly\";\n                prerelease = \"alpha\";\n                version = data[1].slice(0, -1);\n            } else if (version == data[1] || version == (data[2] = (/\\bSafari\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\n                version = null;\n            }\n            // Use the full Chrome version when available.\n            data[1] = (/\\b(?:Headless)?Chrome\\/([\\d.]+)/i.exec(ua) || 0)[1];\n            // Detect Blink layout engine.\n            if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == \"WebKit\") {\n                layout = [\n                    \"Blink\"\n                ];\n            }\n            // Detect JavaScriptCore.\n            // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi\n            if (!useFeatures || !likeChrome && !data[1]) {\n                layout && (layout[1] = \"like Safari\");\n                data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? \"4+\" : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : data < 602 ? 9 : data < 604 ? 10 : data < 606 ? 11 : data < 608 ? 12 : \"12\");\n            } else {\n                layout && (layout[1] = \"like Chrome\");\n                data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? \"13+\" : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? \"21+\" : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != \"Blink\" ? \"27\" : \"28\");\n            }\n            // Add the postfix of \".x\" or \"+\" for approximate versions.\n            layout && (layout[1] += \" \" + (data += typeof data == \"number\" ? \".x\" : /[.+]/.test(data) ? \"\" : \"+\"));\n            // Obscure version for some Safari 1-2 releases.\n            if (name == \"Safari\" && (!version || parseInt(version) > 45)) {\n                version = data;\n            } else if (name == \"Chrome\" && /\\bHeadlessChrome/i.test(ua)) {\n                description.unshift(\"headless\");\n            }\n        }\n        // Detect Opera desktop modes.\n        if (name == \"Opera\" && (data = /\\bzbov|zvav$/.exec(os))) {\n            name += \" \";\n            description.unshift(\"desktop mode\");\n            if (data == \"zvav\") {\n                name += \"Mini\";\n                version = null;\n            } else {\n                name += \"Mobile\";\n            }\n            os = os.replace(RegExp(\" *\" + data + \"$\"), \"\");\n        } else if (name == \"Safari\" && /\\bChrome\\b/.exec(layout && layout[1])) {\n            description.unshift(\"desktop mode\");\n            name = \"Chrome Mobile\";\n            version = null;\n            if (/\\bOS X\\b/.test(os)) {\n                manufacturer = \"Apple\";\n                os = \"iOS 4.3+\";\n            } else {\n                os = null;\n            }\n        } else if (/\\bSRWare Iron\\b/.test(name) && !version) {\n            version = getVersion(\"Chrome\");\n        }\n        // Strip incorrect OS versions.\n        if (version && version.indexOf(data = /[\\d.]+$/.exec(os)) == 0 && ua.indexOf(\"/\" + data + \"-\") > -1) {\n            os = trim(os.replace(data, \"\"));\n        }\n        // Ensure OS does not include the browser name.\n        if (os && os.indexOf(name) != -1 && !RegExp(name + \" OS\").test(os)) {\n            os = os.replace(RegExp(\" *\" + qualify(name) + \" *\"), \"\");\n        }\n        // Add layout engine.\n        if (layout && !/\\b(?:Avant|Nook)\\b/.test(name) && (/Browser|Lunascape|Maxthon/.test(name) || name != \"Safari\" && /^iOS/.test(os) && /\\bSafari\\b/.test(layout[1]) || /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|SRWare Iron|Vivaldi|Web)/.test(name) && layout[1])) {\n            // Don't add layout details to description if they are falsey.\n            (data = layout[layout.length - 1]) && description.push(data);\n        }\n        // Combine contextual information.\n        if (description.length) {\n            description = [\n                \"(\" + description.join(\"; \") + \")\"\n            ];\n        }\n        // Append manufacturer to description.\n        if (manufacturer && product && product.indexOf(manufacturer) < 0) {\n            description.push(\"on \" + manufacturer);\n        }\n        // Append product to description.\n        if (product) {\n            description.push((/^on /.test(description[description.length - 1]) ? \"\" : \"on \") + product);\n        }\n        // Parse the OS into an object.\n        if (os) {\n            data = / ([\\d.+]+)$/.exec(os);\n            isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == \"/\";\n            os = {\n                \"architecture\": 32,\n                \"family\": data && !isSpecialCasedOS ? os.replace(data[0], \"\") : os,\n                \"version\": data ? data[1] : null,\n                \"toString\": function() {\n                    var version = this.version;\n                    return this.family + (version && !isSpecialCasedOS ? \" \" + version : \"\") + (this.architecture == 64 ? \" 64-bit\" : \"\");\n                }\n            };\n        }\n        // Add browser/OS architecture.\n        if ((data = /\\b(?:AMD|IA|Win|WOW|x86_|x)64\\b/i.exec(arch)) && !/\\bi686\\b/i.test(arch)) {\n            if (os) {\n                os.architecture = 64;\n                os.family = os.family.replace(RegExp(\" *\" + data), \"\");\n            }\n            if (name && (/\\bWOW64\\b/i.test(ua) || useFeatures && /\\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\\bWin64; x64\\b/i.test(ua))) {\n                description.unshift(\"32-bit\");\n            }\n        } else if (os && /^OS X/.test(os.family) && name == \"Chrome\" && parseFloat(version) >= 39) {\n            os.architecture = 64;\n        }\n        ua || (ua = null);\n        /*------------------------------------------------------------------------*/ /**\n     * The platform object.\n     *\n     * @name platform\n     * @type Object\n     */ var platform = {};\n        /**\n     * The platform description.\n     *\n     * @memberOf platform\n     * @type string|null\n     */ platform.description = ua;\n        /**\n     * The name of the browser's layout engine.\n     *\n     * The list of common layout engines include:\n     * \"Blink\", \"EdgeHTML\", \"Gecko\", \"Trident\" and \"WebKit\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */ platform.layout = layout && layout[0];\n        /**\n     * The name of the product's manufacturer.\n     *\n     * The list of manufacturers include:\n     * \"Apple\", \"Archos\", \"Amazon\", \"Asus\", \"Barnes & Noble\", \"BlackBerry\",\n     * \"Google\", \"HP\", \"HTC\", \"LG\", \"Microsoft\", \"Motorola\", \"Nintendo\",\n     * \"Nokia\", \"Samsung\" and \"Sony\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */ platform.manufacturer = manufacturer;\n        /**\n     * The name of the browser/environment.\n     *\n     * The list of common browser names include:\n     * \"Chrome\", \"Electron\", \"Firefox\", \"Firefox for iOS\", \"IE\",\n     * \"Microsoft Edge\", \"PhantomJS\", \"Safari\", \"SeaMonkey\", \"Silk\",\n     * \"Opera Mini\" and \"Opera\"\n     *\n     * Mobile versions of some browsers have \"Mobile\" appended to their name:\n     * eg. \"Chrome Mobile\", \"Firefox Mobile\", \"IE Mobile\" and \"Opera Mobile\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */ platform.name = name;\n        /**\n     * The alpha/beta release indicator.\n     *\n     * @memberOf platform\n     * @type string|null\n     */ platform.prerelease = prerelease;\n        /**\n     * The name of the product hosting the browser.\n     *\n     * The list of common products include:\n     *\n     * \"BlackBerry\", \"Galaxy S4\", \"Lumia\", \"iPad\", \"iPod\", \"iPhone\", \"Kindle\",\n     * \"Kindle Fire\", \"Nexus\", \"Nook\", \"PlayBook\", \"TouchPad\" and \"Transformer\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */ platform.product = product;\n        /**\n     * The browser's user agent string.\n     *\n     * @memberOf platform\n     * @type string|null\n     */ platform.ua = ua;\n        /**\n     * The browser/environment version.\n     *\n     * @memberOf platform\n     * @type string|null\n     */ platform.version = name && version;\n        /**\n     * The name of the operating system.\n     *\n     * @memberOf platform\n     * @type Object\n     */ platform.os = os || {\n            /**\n       * The CPU architecture the OS is built for.\n       *\n       * @memberOf platform.os\n       * @type number|null\n       */ \"architecture\": null,\n            /**\n       * The family of the OS.\n       *\n       * Common values include:\n       * \"Windows\", \"Windows Server 2008 R2 / 7\", \"Windows Server 2008 / Vista\",\n       * \"Windows XP\", \"OS X\", \"Linux\", \"Ubuntu\", \"Debian\", \"Fedora\", \"Red Hat\",\n       * \"SuSE\", \"Android\", \"iOS\" and \"Windows Phone\"\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */ \"family\": null,\n            /**\n       * The version of the OS.\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */ \"version\": null,\n            /**\n       * Returns the OS string.\n       *\n       * @memberOf platform.os\n       * @returns {string} The OS string.\n       */ \"toString\": function() {\n                return \"null\";\n            }\n        };\n        platform.parse = parse;\n        platform.toString = toStringPlatform;\n        if (platform.version) {\n            description.unshift(version);\n        }\n        if (platform.name) {\n            description.unshift(name);\n        }\n        if (os && name && !(os == String(os).split(\" \")[0] && (os == name.split(\" \")[0] || product))) {\n            description.push(product ? \"(\" + os + \")\" : \"on \" + os);\n        }\n        if (description.length) {\n            platform.description = description.join(\" \");\n        }\n        return platform;\n    }\n    /*--------------------------------------------------------------------------*/ // Export platform.\n    var platform = parse();\n    // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n    if (true) {\n        // Expose platform on the global object to prevent errors when platform is\n        // loaded by a script tag in the presence of an AMD loader.\n        // See http://requirejs.org/docs/errors.html#mismatch for more details.\n        root.platform = platform;\n        // Define as an anonymous module so platform can be aliased through path mapping.\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return platform;\n        }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/platform/platform.js\n");

/***/ })

};
;