"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@lifeomic";
exports.ids = ["vendor-chunks/@lifeomic"];
exports.modules = {

/***/ "(ssr)/./node_modules/@lifeomic/axios-fetch/src/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@lifeomic/axios-fetch/src/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.buildAxiosFetch = void 0;\nconst typeUtils_1 = __webpack_require__(/*! ./typeUtils */ \"(ssr)/./node_modules/@lifeomic/axios-fetch/src/typeUtils.js\");\n/**\n * A Fetch WebAPI implementation based on the Axios client\n */ const axiosFetch = (axios, // Convert the `fetch` style arguments into a Axios style config\ntransformer = (config)=>config)=>async (input, init)=>{\n        const rawHeaders = (0, typeUtils_1.createAxiosHeaders)(init === null || init === void 0 ? void 0 : init.headers);\n        const lowerCasedHeaders = {};\n        Object.entries(rawHeaders).forEach(([name, value])=>{\n            lowerCasedHeaders[name.toLowerCase()] = value;\n        });\n        if (!(\"content-type\" in lowerCasedHeaders)) {\n            lowerCasedHeaders[\"content-type\"] = \"text/plain;charset=UTF-8\";\n        }\n        const rawConfig = {\n            url: (0, typeUtils_1.getUrl)(input),\n            method: (init === null || init === void 0 ? void 0 : init.method) || \"GET\",\n            data: init === null || init === void 0 ? void 0 : init.body,\n            headers: lowerCasedHeaders,\n            // Force the response to an arraybuffer type. Without this, the Response\n            // object will try to guess the content type and add headers that weren't in\n            // the response.\n            // NOTE: Don't use 'stream' because it's not supported in the browser\n            responseType: \"arraybuffer\"\n        };\n        const config = transformer(rawConfig, input, init);\n        let result;\n        try {\n            result = await axios.request(config);\n        } catch (err) {\n            if (err.response) {\n                result = err.response;\n            } else {\n                throw err;\n            }\n        }\n        return new Response(result.data, {\n            status: result.status,\n            statusText: result.statusText,\n            headers: (0, typeUtils_1.createFetchHeaders)(result.headers)\n        });\n    };\nconst buildAxiosFetch = (axios, transformer)=>axiosFetch(axios, transformer);\nexports.buildAxiosFetch = buildAxiosFetch; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FJcUI7QUFNckI7O0dBRUc7QUFDSCxNQUFNLFVBQVUsR0FBRyxDQUNqQixLQUFvQjtBQUNwQixnRUFBZ0U7QUFDaEUsY0FBc0MsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFDeEQsRUFBRSxDQUFDLEtBQUssRUFDTixLQUFrQixFQUNsQixJQUFXLEVBQ1gsRUFBRTtJQUNGLE1BQU0sVUFBVSxHQUFHLElBQUEsOEJBQWtCLEVBQUMsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3JELE1BQU0saUJBQWlCLEdBQTJCLEVBQUUsQ0FBQztJQUNyRCxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7UUFDbkQsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQ2hELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLENBQUMsY0FBYyxJQUFJLGlCQUFpQixDQUFDLEVBQUU7UUFDMUMsaUJBQWlCLENBQUMsY0FBYyxDQUFDLEdBQUcsMEJBQTBCLENBQUM7S0FDaEU7SUFFRCxNQUFNLFNBQVMsR0FBdUI7UUFDcEMsR0FBRyxFQUFFLElBQUEsa0JBQU0sRUFBQyxLQUFLLENBQUM7UUFDbEIsTUFBTSxFQUFFLENBQUMsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLE1BQXVDLEtBQUksS0FBSztRQUMvRCxJQUFJLEVBQUUsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLElBQUk7UUFDaEIsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQix3RUFBd0U7UUFDeEUsNEVBQTRFO1FBQzVFLGdCQUFnQjtRQUNoQixxRUFBcUU7UUFDckUsWUFBWSxFQUFFLGFBQWE7S0FDNUIsQ0FBQztJQUVGLE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRW5ELElBQUksTUFBTSxDQUFDO0lBQ1gsSUFBSTtRQUNGLE1BQU0sR0FBRyxNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDdEM7SUFBQyxPQUFPLEdBQVEsRUFBRTtRQUNqQixJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUU7WUFDaEIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7U0FDdkI7YUFBTTtZQUNMLE1BQU0sR0FBRyxDQUFDO1NBQ1g7S0FDRjtJQUVELE9BQU8sSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtRQUMvQixNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU07UUFDckIsVUFBVSxFQUFFLE1BQU0sQ0FBQyxVQUFVO1FBQzdCLE9BQU8sRUFBRSxJQUFBLDhCQUFrQixFQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7S0FDNUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUcsTUFBTSxlQUFlLEdBQUcsQ0FDN0IsS0FBb0IsRUFDcEIsV0FBb0MsRUFDcEMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFIdkIsUUFBQSxlQUFlLG1CQUdRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgY3JlYXRlQXhpb3NIZWFkZXJzLFxuICBjcmVhdGVGZXRjaEhlYWRlcnMsXG4gIGdldFVybFxufSBmcm9tICcuL3R5cGVVdGlscyc7XG5pbXBvcnQgeyBBeGlvc0luc3RhbmNlLCBBeGlvc1JlcXVlc3RDb25maWcgfSBmcm9tICcuL2F4aW9zLXR5cGVzJztcblxuZXhwb3J0IHR5cGUgQXhpb3NUcmFuc2Zvcm1lcjxJbml0IGV4dGVuZHMgUmVxdWVzdEluaXQgPSBSZXF1ZXN0SW5pdD4gPVxuICAoY29uZmlnOiBBeGlvc1JlcXVlc3RDb25maWcsIGlucHV0OiBSZXF1ZXN0SW5mbywgaW5pdD86IEluaXQpID0+IEF4aW9zUmVxdWVzdENvbmZpZztcblxuLyoqXG4gKiBBIEZldGNoIFdlYkFQSSBpbXBsZW1lbnRhdGlvbiBiYXNlZCBvbiB0aGUgQXhpb3MgY2xpZW50XG4gKi9cbmNvbnN0IGF4aW9zRmV0Y2ggPSA8SW5pdCBleHRlbmRzIFJlcXVlc3RJbml0ID0gUmVxdWVzdEluaXQ+KFxuICBheGlvczogQXhpb3NJbnN0YW5jZSxcbiAgLy8gQ29udmVydCB0aGUgYGZldGNoYCBzdHlsZSBhcmd1bWVudHMgaW50byBhIEF4aW9zIHN0eWxlIGNvbmZpZ1xuICB0cmFuc2Zvcm1lcjogQXhpb3NUcmFuc2Zvcm1lcjxJbml0PiA9IChjb25maWcpID0+IGNvbmZpZ1xuKSA9PiBhc3luYyAoXG4gICAgaW5wdXQ6IFJlcXVlc3RJbmZvLFxuICAgIGluaXQ/OiBJbml0XG4gICkgPT4ge1xuICAgIGNvbnN0IHJhd0hlYWRlcnMgPSBjcmVhdGVBeGlvc0hlYWRlcnMoaW5pdD8uaGVhZGVycyk7XG4gICAgY29uc3QgbG93ZXJDYXNlZEhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgICBPYmplY3QuZW50cmllcyhyYXdIZWFkZXJzKS5mb3JFYWNoKChbbmFtZSwgdmFsdWVdKSA9PiB7XG4gICAgICBsb3dlckNhc2VkSGVhZGVyc1tuYW1lLnRvTG93ZXJDYXNlKCldID0gdmFsdWU7XG4gICAgfSk7XG5cbiAgICBpZiAoISgnY29udGVudC10eXBlJyBpbiBsb3dlckNhc2VkSGVhZGVycykpIHtcbiAgICAgIGxvd2VyQ2FzZWRIZWFkZXJzWydjb250ZW50LXR5cGUnXSA9ICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnO1xuICAgIH1cblxuICAgIGNvbnN0IHJhd0NvbmZpZzogQXhpb3NSZXF1ZXN0Q29uZmlnID0ge1xuICAgICAgdXJsOiBnZXRVcmwoaW5wdXQpLFxuICAgICAgbWV0aG9kOiAoaW5pdD8ubWV0aG9kIGFzIEF4aW9zUmVxdWVzdENvbmZpZ1snbWV0aG9kJ10pIHx8ICdHRVQnLFxuICAgICAgZGF0YTogaW5pdD8uYm9keSxcbiAgICAgIGhlYWRlcnM6IGxvd2VyQ2FzZWRIZWFkZXJzLFxuICAgICAgLy8gRm9yY2UgdGhlIHJlc3BvbnNlIHRvIGFuIGFycmF5YnVmZmVyIHR5cGUuIFdpdGhvdXQgdGhpcywgdGhlIFJlc3BvbnNlXG4gICAgICAvLyBvYmplY3Qgd2lsbCB0cnkgdG8gZ3Vlc3MgdGhlIGNvbnRlbnQgdHlwZSBhbmQgYWRkIGhlYWRlcnMgdGhhdCB3ZXJlbid0IGluXG4gICAgICAvLyB0aGUgcmVzcG9uc2UuXG4gICAgICAvLyBOT1RFOiBEb24ndCB1c2UgJ3N0cmVhbScgYmVjYXVzZSBpdCdzIG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXJcbiAgICAgIHJlc3BvbnNlVHlwZTogJ2FycmF5YnVmZmVyJ1xuICAgIH07XG5cbiAgICBjb25zdCBjb25maWcgPSB0cmFuc2Zvcm1lcihyYXdDb25maWcsIGlucHV0LCBpbml0KTtcblxuICAgIGxldCByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IGF4aW9zLnJlcXVlc3QoY29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgICAgaWYgKGVyci5yZXNwb25zZSkge1xuICAgICAgICByZXN1bHQgPSBlcnIucmVzcG9uc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShyZXN1bHQuZGF0YSwge1xuICAgICAgc3RhdHVzOiByZXN1bHQuc3RhdHVzLFxuICAgICAgc3RhdHVzVGV4dDogcmVzdWx0LnN0YXR1c1RleHQsXG4gICAgICBoZWFkZXJzOiBjcmVhdGVGZXRjaEhlYWRlcnMocmVzdWx0LmhlYWRlcnMpXG4gICAgfSk7XG4gIH07XG5cbmV4cG9ydCBjb25zdCBidWlsZEF4aW9zRmV0Y2ggPSA8SW5pdCBleHRlbmRzIFJlcXVlc3RJbml0ID0gUmVxdWVzdEluaXQ+IChcbiAgYXhpb3M6IEF4aW9zSW5zdGFuY2UsXG4gIHRyYW5zZm9ybWVyPzogQXhpb3NUcmFuc2Zvcm1lcjxJbml0PlxuKSA9PiBheGlvc0ZldGNoKGF4aW9zLCB0cmFuc2Zvcm1lcik7XG4iXX0=\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lifeomic/axios-fetch/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@lifeomic/axios-fetch/src/typeUtils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@lifeomic/axios-fetch/src/typeUtils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getUrl = exports.createAxiosHeaders = exports.createFetchHeaders = void 0;\nfunction createFetchHeaders(axiosHeaders = {}) {\n    const headers = [];\n    Object.entries(axiosHeaders).forEach(([name, value])=>{\n        headers.push([\n            name,\n            value\n        ]);\n    });\n    return headers;\n}\nexports.createFetchHeaders = createFetchHeaders;\nconst isHeaders = (headers)=>{\n    var _a;\n    return ((_a = headers.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"Headers\";\n};\nfunction createAxiosHeaders(headers = {}) {\n    const rawHeaders = {};\n    if (isHeaders(headers)) {\n        headers.forEach((value, name)=>{\n            rawHeaders[name] = value;\n        });\n    } else if (Array.isArray(headers)) {\n        headers.forEach(([name, value])=>{\n            if (value) {\n                rawHeaders[name] = value;\n            }\n        });\n    } else {\n        Object.entries(headers).forEach(([name, value])=>{\n            if (value) {\n                rawHeaders[name] = value;\n            }\n        });\n    }\n    return rawHeaders;\n}\nexports.createAxiosHeaders = createAxiosHeaders;\nfunction getUrl(input) {\n    let url;\n    if (typeof input === \"string\") {\n        url = input;\n    } else if (input === null || input === void 0 ? void 0 : input.href) {\n        url = input.href;\n    } else if (input === null || input === void 0 ? void 0 : input.url) {\n        url = input.url;\n    }\n    return url;\n}\nexports.getUrl = getUrl; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZVV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidHlwZVV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQVNBLFNBQWdCLGtCQUFrQixDQUFFLGVBQXVDLEVBQUU7SUFDM0UsTUFBTSxPQUFPLEdBQWUsRUFBRSxDQUFDO0lBQy9CLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUNyRCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBTkQsZ0RBTUM7QUFFRCxNQUFNLFNBQVMsR0FBRyxDQUFDLE9BQW9CLEVBQXNCLEVBQUUsV0FBQyxPQUFBLENBQUEsTUFBQSxPQUFPLENBQUMsV0FBVywwQ0FBRSxJQUFJLE1BQUssU0FBUyxDQUFBLEVBQUEsQ0FBQztBQUV4RyxTQUFnQixrQkFBa0IsQ0FBRSxVQUF1QixFQUFFO0lBQzNELE1BQU0sVUFBVSxHQUEyQixFQUFFLENBQUM7SUFFOUMsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDdEIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUM5QixVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0tBQ0o7U0FBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDakMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7WUFDaEMsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsVUFBVSxDQUFDLElBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQzthQUMzQjtRQUNILENBQUMsQ0FBQyxDQUFDO0tBQ0o7U0FBTTtRQUNMLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtZQUNoRCxJQUFJLEtBQUssRUFBRTtnQkFDVCxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQzFCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFyQkQsZ0RBcUJDO0FBRUQsU0FBZ0IsTUFBTSxDQUFFLEtBQWU7SUFDckMsSUFBSSxHQUF1QixDQUFDO0lBQzVCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzdCLEdBQUcsR0FBRyxLQUFLLENBQUM7S0FDYjtTQUFNLElBQUksS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLElBQUksRUFBRTtRQUN0QixHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztLQUNsQjtTQUFNLElBQUksS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLEdBQUcsRUFBRTtRQUNyQixHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztLQUNqQjtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQVZELHdCQVVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGVhZGVycyBhcyBOb2RlSGVhZGVycyB9IGZyb20gJ25vZGUtZmV0Y2gnO1xuXG5leHBvcnQgdHlwZSBIZWFkZXJzTGlrZSA9IHN0cmluZ1tdW10gfCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCB1bmRlZmluZWQ+IHwgSGVhZGVycyB8IE5vZGVIZWFkZXJzO1xuXG5leHBvcnQgdHlwZSBVcmxMaWtlID0gc3RyaW5nIHwge1xuICBocmVmPzogc3RyaW5nO1xuICB1cmw/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGZXRjaEhlYWRlcnMgKGF4aW9zSGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9KTogc3RyaW5nW11bXSB7XG4gIGNvbnN0IGhlYWRlcnM6IHN0cmluZ1tdW10gPSBbXTtcbiAgT2JqZWN0LmVudHJpZXMoYXhpb3NIZWFkZXJzKS5mb3JFYWNoKChbbmFtZSwgdmFsdWVdKSA9PiB7XG4gICAgaGVhZGVycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xuICB9KTtcbiAgcmV0dXJuIGhlYWRlcnM7XG59XG5cbmNvbnN0IGlzSGVhZGVycyA9IChoZWFkZXJzOiBIZWFkZXJzTGlrZSk6IGhlYWRlcnMgaXMgSGVhZGVycyA9PiBoZWFkZXJzLmNvbnN0cnVjdG9yPy5uYW1lID09PSAnSGVhZGVycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBeGlvc0hlYWRlcnMgKGhlYWRlcnM6IEhlYWRlcnNMaWtlID0ge30pOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcbiAgY29uc3QgcmF3SGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuXG4gIGlmIChpc0hlYWRlcnMoaGVhZGVycykpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goKHZhbHVlLCBuYW1lKSA9PiB7XG4gICAgICByYXdIZWFkZXJzW25hbWVdID0gdmFsdWU7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xuICAgIGhlYWRlcnMuZm9yRWFjaCgoW25hbWUsIHZhbHVlXSkgPT4ge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHJhd0hlYWRlcnNbbmFtZSFdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgT2JqZWN0LmVudHJpZXMoaGVhZGVycykuZm9yRWFjaCgoW25hbWUsIHZhbHVlXSkgPT4ge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHJhd0hlYWRlcnNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmF3SGVhZGVycztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVybCAoaW5wdXQ/OiBVcmxMaWtlKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgbGV0IHVybDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgIHVybCA9IGlucHV0O1xuICB9IGVsc2UgaWYgKGlucHV0Py5ocmVmKSB7XG4gICAgdXJsID0gaW5wdXQuaHJlZjtcbiAgfSBlbHNlIGlmIChpbnB1dD8udXJsKSB7XG4gICAgdXJsID0gaW5wdXQudXJsO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG4iXX0=\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lifeomic/axios-fetch/src/typeUtils.js\n");

/***/ })

};
;