"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/blake2b";
exports.ids = ["vendor-chunks/blake2b"];
exports.modules = {

/***/ "(ssr)/./node_modules/blake2b/index.js":
/*!***************************************!*\
  !*** ./node_modules/blake2b/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar assert = __webpack_require__(/*! nanoassert */ \"(ssr)/./node_modules/nanoassert/index.js\");\nvar b2wasm = __webpack_require__(/*! blake2b-wasm */ \"(ssr)/./node_modules/blake2b-wasm/index.js\");\n// 64-bit unsigned addition\n// Sets v[a,a+1] += v[b,b+1]\n// v should be a Uint32Array\nfunction ADD64AA(v, a, b) {\n    var o0 = v[a] + v[b];\n    var o1 = v[a + 1] + v[b + 1];\n    if (o0 >= 0x100000000) {\n        o1++;\n    }\n    v[a] = o0;\n    v[a + 1] = o1;\n}\n// 64-bit unsigned addition\n// Sets v[a,a+1] += b\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\nfunction ADD64AC(v, a, b0, b1) {\n    var o0 = v[a] + b0;\n    if (b0 < 0) {\n        o0 += 0x100000000;\n    }\n    var o1 = v[a + 1] + b1;\n    if (o0 >= 0x100000000) {\n        o1++;\n    }\n    v[a] = o0;\n    v[a + 1] = o1;\n}\n// Little-endian byte access\nfunction B2B_GET32(arr, i) {\n    return arr[i] ^ arr[i + 1] << 8 ^ arr[i + 2] << 16 ^ arr[i + 3] << 24;\n}\n// G Mixing function\n// The ROTRs are inlined for speed\nfunction B2B_G(a, b, c, d, ix, iy) {\n    var x0 = m[ix];\n    var x1 = m[ix + 1];\n    var y0 = m[iy];\n    var y1 = m[iy + 1];\n    ADD64AA(v, a, b) // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\n    ;\n    ADD64AC(v, a, x0, x1) // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\n    ;\n    // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\n    var xor0 = v[d] ^ v[a];\n    var xor1 = v[d + 1] ^ v[a + 1];\n    v[d] = xor1;\n    v[d + 1] = xor0;\n    ADD64AA(v, c, d);\n    // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\n    xor0 = v[b] ^ v[c];\n    xor1 = v[b + 1] ^ v[c + 1];\n    v[b] = xor0 >>> 24 ^ xor1 << 8;\n    v[b + 1] = xor1 >>> 24 ^ xor0 << 8;\n    ADD64AA(v, a, b);\n    ADD64AC(v, a, y0, y1);\n    // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\n    xor0 = v[d] ^ v[a];\n    xor1 = v[d + 1] ^ v[a + 1];\n    v[d] = xor0 >>> 16 ^ xor1 << 16;\n    v[d + 1] = xor1 >>> 16 ^ xor0 << 16;\n    ADD64AA(v, c, d);\n    // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\n    xor0 = v[b] ^ v[c];\n    xor1 = v[b + 1] ^ v[c + 1];\n    v[b] = xor1 >>> 31 ^ xor0 << 1;\n    v[b + 1] = xor0 >>> 31 ^ xor1 << 1;\n}\n// Initialization Vector\nvar BLAKE2B_IV32 = new Uint32Array([\n    0xF3BCC908,\n    0x6A09E667,\n    0x84CAA73B,\n    0xBB67AE85,\n    0xFE94F82B,\n    0x3C6EF372,\n    0x5F1D36F1,\n    0xA54FF53A,\n    0xADE682D1,\n    0x510E527F,\n    0x2B3E6C1F,\n    0x9B05688C,\n    0xFB41BD6B,\n    0x1F83D9AB,\n    0x137E2179,\n    0x5BE0CD19\n]);\nvar SIGMA8 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    14,\n    10,\n    4,\n    8,\n    9,\n    15,\n    13,\n    6,\n    1,\n    12,\n    0,\n    2,\n    11,\n    7,\n    5,\n    3,\n    11,\n    8,\n    12,\n    0,\n    5,\n    2,\n    15,\n    13,\n    10,\n    14,\n    3,\n    6,\n    7,\n    1,\n    9,\n    4,\n    7,\n    9,\n    3,\n    1,\n    13,\n    12,\n    11,\n    14,\n    2,\n    6,\n    5,\n    10,\n    4,\n    0,\n    15,\n    8,\n    9,\n    0,\n    5,\n    7,\n    2,\n    4,\n    10,\n    15,\n    14,\n    1,\n    11,\n    12,\n    6,\n    8,\n    3,\n    13,\n    2,\n    12,\n    6,\n    10,\n    0,\n    11,\n    8,\n    3,\n    4,\n    13,\n    7,\n    5,\n    15,\n    14,\n    1,\n    9,\n    12,\n    5,\n    1,\n    15,\n    14,\n    13,\n    4,\n    10,\n    0,\n    7,\n    6,\n    3,\n    9,\n    2,\n    8,\n    11,\n    13,\n    11,\n    7,\n    14,\n    12,\n    1,\n    3,\n    9,\n    5,\n    0,\n    15,\n    4,\n    8,\n    6,\n    2,\n    10,\n    6,\n    15,\n    14,\n    9,\n    11,\n    3,\n    0,\n    8,\n    12,\n    2,\n    13,\n    7,\n    1,\n    4,\n    10,\n    5,\n    10,\n    2,\n    8,\n    4,\n    7,\n    6,\n    1,\n    5,\n    15,\n    11,\n    9,\n    14,\n    3,\n    12,\n    13,\n    0,\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    14,\n    10,\n    4,\n    8,\n    9,\n    15,\n    13,\n    6,\n    1,\n    12,\n    0,\n    2,\n    11,\n    7,\n    5,\n    3\n];\n// These are offsets into a uint64 buffer.\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\n// because this is Javascript and we don't have uint64s\nvar SIGMA82 = new Uint8Array(SIGMA8.map(function(x) {\n    return x * 2;\n}));\n// Compression function. 'last' flag indicates last block.\n// Note we're representing 16 uint64s as 32 uint32s\nvar v = new Uint32Array(32);\nvar m = new Uint32Array(32);\nfunction blake2bCompress(ctx, last) {\n    var i = 0;\n    // init work variables\n    for(i = 0; i < 16; i++){\n        v[i] = ctx.h[i];\n        v[i + 16] = BLAKE2B_IV32[i];\n    }\n    // low 64 bits of offset\n    v[24] = v[24] ^ ctx.t;\n    v[25] = v[25] ^ ctx.t / 0x100000000;\n    // high 64 bits not supported, offset may not be higher than 2**53-1\n    // last block flag set ?\n    if (last) {\n        v[28] = ~v[28];\n        v[29] = ~v[29];\n    }\n    // get little-endian words\n    for(i = 0; i < 32; i++){\n        m[i] = B2B_GET32(ctx.b, 4 * i);\n    }\n    // twelve rounds of mixing\n    for(i = 0; i < 12; i++){\n        B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);\n        B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);\n        B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);\n        B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);\n        B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);\n        B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);\n        B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);\n        B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);\n    }\n    for(i = 0; i < 16; i++){\n        ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];\n    }\n}\n// reusable parameter_block\nvar parameter_block = new Uint8Array([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0 // 60: personal\n]);\n// Creates a BLAKE2b hashing context\n// Requires an output length between 1 and 64 bytes\n// Takes an optional Uint8Array key\nfunction Blake2b(outlen, key, salt, personal) {\n    // zero out parameter_block before usage\n    parameter_block.fill(0);\n    // state, 'param block'\n    this.b = new Uint8Array(128);\n    this.h = new Uint32Array(16);\n    this.t = 0 // input count\n    ;\n    this.c = 0 // pointer within buffer\n    ;\n    this.outlen = outlen // output length in bytes\n    ;\n    parameter_block[0] = outlen;\n    if (key) parameter_block[1] = key.length;\n    parameter_block[2] = 1 // fanout\n    ;\n    parameter_block[3] = 1 // depth\n    ;\n    if (salt) parameter_block.set(salt, 32);\n    if (personal) parameter_block.set(personal, 48);\n    // initialize hash state\n    for(var i = 0; i < 16; i++){\n        this.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameter_block, i * 4);\n    }\n    // key the hash, if applicable\n    if (key) {\n        blake2bUpdate(this, key);\n        // at the end\n        this.c = 128;\n    }\n}\nBlake2b.prototype.update = function(input) {\n    assert(input != null, \"input must be Uint8Array or Buffer\");\n    blake2bUpdate(this, input);\n    return this;\n};\nBlake2b.prototype.digest = function(out) {\n    var buf = !out || out === \"binary\" || out === \"hex\" ? new Uint8Array(this.outlen) : out;\n    assert(buf.length >= this.outlen, \"out must have at least outlen bytes of space\");\n    blake2bFinal(this, buf);\n    if (out === \"hex\") return hexSlice(buf);\n    return buf;\n};\nBlake2b.prototype.final = Blake2b.prototype.digest;\nBlake2b.ready = function(cb) {\n    b2wasm.ready(function() {\n        cb() // ignore the error\n        ;\n    });\n};\n// Updates a BLAKE2b streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2bUpdate(ctx, input) {\n    for(var i = 0; i < input.length; i++){\n        if (ctx.c === 128) {\n            ctx.t += ctx.c // add counters\n            ;\n            blake2bCompress(ctx, false) // compress (not last)\n            ;\n            ctx.c = 0 // counter to zero\n            ;\n        }\n        ctx.b[ctx.c++] = input[i];\n    }\n}\n// Completes a BLAKE2b streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2bFinal(ctx, out) {\n    ctx.t += ctx.c // mark last block offset\n    ;\n    while(ctx.c < 128){\n        ctx.b[ctx.c++] = 0;\n    }\n    blake2bCompress(ctx, true) // final block flag = 1\n    ;\n    for(var i = 0; i < ctx.outlen; i++){\n        out[i] = ctx.h[i >> 2] >> 8 * (i & 3);\n    }\n    return out;\n}\nfunction hexSlice(buf) {\n    var str = \"\";\n    for(var i = 0; i < buf.length; i++)str += toHex(buf[i]);\n    return str;\n}\nfunction toHex(n) {\n    if (n < 16) return \"0\" + n.toString(16);\n    return n.toString(16);\n}\nvar Proto = Blake2b;\nmodule.exports = function createHash(outlen, key, salt, personal, noAssert) {\n    if (noAssert !== true) {\n        assert(outlen >= BYTES_MIN, \"outlen must be at least \" + BYTES_MIN + \", was given \" + outlen);\n        assert(outlen <= BYTES_MAX, \"outlen must be at most \" + BYTES_MAX + \", was given \" + outlen);\n        if (key != null) assert(key.length >= KEYBYTES_MIN, \"key must be at least \" + KEYBYTES_MIN + \", was given \" + key.length);\n        if (key != null) assert(key.length <= KEYBYTES_MAX, \"key must be at most \" + KEYBYTES_MAX + \", was given \" + key.length);\n        if (salt != null) assert(salt.length === SALTBYTES, \"salt must be exactly \" + SALTBYTES + \", was given \" + salt.length);\n        if (personal != null) assert(personal.length === PERSONALBYTES, \"personal must be exactly \" + PERSONALBYTES + \", was given \" + personal.length);\n    }\n    return new Proto(outlen, key, salt, personal);\n};\nmodule.exports.ready = function(cb) {\n    b2wasm.ready(function() {\n        cb();\n    });\n};\nmodule.exports.WASM_SUPPORTED = b2wasm.SUPPORTED;\nmodule.exports.WASM_LOADED = false;\nvar BYTES_MIN = module.exports.BYTES_MIN = 16;\nvar BYTES_MAX = module.exports.BYTES_MAX = 64;\nvar BYTES = module.exports.BYTES = 32;\nvar KEYBYTES_MIN = module.exports.KEYBYTES_MIN = 16;\nvar KEYBYTES_MAX = module.exports.KEYBYTES_MAX = 64;\nvar KEYBYTES = module.exports.KEYBYTES = 32;\nvar SALTBYTES = module.exports.SALTBYTES = 16;\nvar PERSONALBYTES = module.exports.PERSONALBYTES = 16;\nb2wasm.ready(function(err) {\n    if (!err) {\n        module.exports.WASM_LOADED = true;\n        Proto = b2wasm;\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/blake2b/index.js\n");

/***/ })

};
;